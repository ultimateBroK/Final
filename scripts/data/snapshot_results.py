#!/usr/bin/env python3
# ==============================================================================
# File: snapshot_results.py
# ==============================================================================
"""
SNAPSHOT SCRIPT: L∆∞u k·∫øt qu·∫£ pipeline th√†nh c√¥ng

M·ª•c ƒë√≠ch:
- T·ª± ƒë·ªông snapshot k·∫øt qu·∫£ m·ªói l·∫ßn pipeline ch·∫°y th√†nh c√¥ng
- L∆∞u v·ªõi timestamp ƒë·ªÉ theo d√µi l·ªãch s·ª≠
- Bao g·ªìm: centroids, clusters, logs, v√† metadata

S·ª≠ d·ª•ng c∆° b·∫£n:
    python scripts/data/snapshot_results.py

Tham s·ªë CLI (ti·∫øng Vi·ªát):
- --list: Li·ªát k√™ t·∫•t c·∫£ snapshots c√≥ s·∫µn
- --name <ten_tuy_chon>: ƒê·∫∑t t√™n snapshot t√πy ch·ªçn (m·∫∑c ƒë·ªãnh d√πng timestamp)
- --extra <path1> [<path2> ...]: Th√™m file b·ªï sung v√†o snapshot (ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ho·∫∑c t∆∞∆°ng ƒë·ªëi t√≠nh t·ª´ root d·ª± √°n)
"""

import os
import shutil
from datetime import datetime
import json
import argparse
from typing import List, Dict, Any

# ==================== C·∫§U H√åNH ====================
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
RESULTS_DIR = os.path.join(ROOT_DIR, 'data', 'results')
SNAPSHOTS_DIR = os.path.join(ROOT_DIR, 'snapshots')
LOGS_DIR = os.path.join(ROOT_DIR, 'logs')

def create_snapshot(snapshot_name: str | None = None, extra_paths: List[str] | None = None) -> str:
    """T·∫°o snapshot c·ªßa k·∫øt qu·∫£ hi·ªán t·∫°i.

    Tham s·ªë:
    - snapshot_name: T√™n th∆∞ m·ª•c snapshot (n·∫øu None s·∫Ω t·∫°o theo timestamp)
    - extra_paths: Danh s√°ch file b·ªï sung c·∫ßn copy v√†o snapshot

    Tr·∫£ v·ªÅ:
    - ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi th∆∞ m·ª•c snapshot v·ª´a t·∫°o
    """

    # T·∫°o timestamp cho snapshot n·∫øu ch∆∞a cung c·∫•p t√™n
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    snapshot_name = snapshot_name or f"snapshot_{timestamp}"
    snapshot_path = os.path.join(SNAPSHOTS_DIR, snapshot_name)
    
    print("="*70)
    print(f"üì∏ T·∫†O SNAPSHOT: {snapshot_name}")
    print("="*70)
    print()
    
    # T·∫°o th∆∞ m·ª•c snapshot
    os.makedirs(snapshot_path, exist_ok=True)
    
    # ==================== Copy results ====================
    print("üìÇ ƒêang copy k·∫øt qu·∫£...")
    
    files_to_snapshot = [
        ('data/results/final_centroids.txt', 'final_centroids.txt'),
        ('data/results/clustered_results.txt', 'clustered_results.txt'),
    ]
    
    # Copy suspicious transactions n·∫øu c√≥
    suspicious_file = os.path.join(RESULTS_DIR, 'suspicious_transactions.csv')
    if os.path.exists(suspicious_file):
        files_to_snapshot.append(
            ('data/results/suspicious_transactions.csv', 'suspicious_transactions.csv')
        )
    
    copied_files: List[Dict[str, Any]] = []
    for src_rel, dst_name in files_to_snapshot:
        src = os.path.join(ROOT_DIR, src_rel)
        dst = os.path.join(snapshot_path, dst_name)
        
        if os.path.exists(src):
            shutil.copy2(src, dst)
            file_size = os.path.getsize(src)
            copied_files.append({
                'name': dst_name,
                'size_bytes': file_size,
                'size_mb': round(file_size / (1024 * 1024), 2)
            })
            print(f"   ‚úÖ {dst_name}")
        else:
            print(f"   ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y: {src_rel}")
    
    print()

    # ==================== Copy EXTRA FILES (n·∫øu c√≥) ====================
    if extra_paths:
        print("‚ûï ƒêang th√™m file b·ªï sung...")
        for p in extra_paths:
            # H·ªó tr·ª£ c·∫£ ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi v√† t∆∞∆°ng ƒë·ªëi t√≠nh t·ª´ ROOT_DIR
            abs_src = p if os.path.isabs(p) else os.path.join(ROOT_DIR, p)
            if os.path.isfile(abs_src):
                dst_name = os.path.basename(abs_src)
                dst = os.path.join(snapshot_path, dst_name)
                shutil.copy2(abs_src, dst)
                file_size = os.path.getsize(abs_src)
                copied_files.append({
                    'name': dst_name,
                    'size_bytes': file_size,
                    'size_mb': round(file_size / (1024 * 1024), 2)
                })
                print(f"   ‚úÖ {dst_name}")
            else:
                print(f"   ‚ö†Ô∏è  B·ªè qua (kh√¥ng t·ªìn t·∫°i file): {p}")
        print()
    
    # ==================== Copy latest log ====================
    print("üìù ƒêang copy log m·ªõi nh·∫•t...")
    
    log_files = sorted([f for f in os.listdir(LOGS_DIR) if f.startswith('pipeline_log_')])
    if log_files:
        latest_log = log_files[-1]
        src_log = os.path.join(LOGS_DIR, latest_log)
        dst_log = os.path.join(snapshot_path, 'pipeline_log.md')
        shutil.copy2(src_log, dst_log)
        print(f"   ‚úÖ {latest_log}")
    else:
        print("   ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y log files")
    
    print()
    
    # ==================== T·∫°o metadata ====================
    print("üìã T·∫°o metadata...")
    
    metadata = {
        'snapshot_name': snapshot_name,
        'timestamp': timestamp,
        'datetime': datetime.now().isoformat(),
        'files': copied_files,
        'total_size_mb': sum(f['size_mb'] for f in copied_files)
    }
    
    metadata_path = os.path.join(snapshot_path, 'metadata.json')
    with open(metadata_path, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    print(f"   ‚úÖ metadata.json")
    print()
    
    # ==================== T√≥m t·∫Øt ====================
    print("="*70)
    print("‚úÖ SNAPSHOT HO√ÄN T·∫§T!")
    print("="*70)
    print(f"üìÅ Th∆∞ m·ª•c: {snapshot_path}")
    print(f"üìä S·ªë files: {len(copied_files) + 2}")  # +2 for log and metadata
    print(f"üíæ T·ªïng dung l∆∞·ª£ng: {metadata['total_size_mb']:.2f} MB")
    print()
    print("üí° Xem snapshot:")
    print(f"   cd {snapshot_path}")
    print(f"   ls -lh")
    print()
    
    return snapshot_path

def list_snapshots() -> None:
    """Li·ªát k√™ t·∫•t c·∫£ snapshots"""
    
    if not os.path.exists(SNAPSHOTS_DIR):
        print("‚ö†Ô∏è  Ch∆∞a c√≥ snapshot n√†o")
        return
    
    snapshots = sorted([d for d in os.listdir(SNAPSHOTS_DIR) 
                       if os.path.isdir(os.path.join(SNAPSHOTS_DIR, d))])
    
    if not snapshots:
        print("‚ö†Ô∏è  Ch∆∞a c√≥ snapshot n√†o")
        return
    
    print("="*70)
    print(f"üì∏ DANH S√ÅCH SNAPSHOTS ({len(snapshots)} snapshots)")
    print("="*70)
    print()
    
    for snapshot in snapshots:
        snapshot_path = os.path.join(SNAPSHOTS_DIR, snapshot)
        metadata_path = os.path.join(snapshot_path, 'metadata.json')
        
        if os.path.exists(metadata_path):
            with open(metadata_path, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            print(f"üìÅ {snapshot}")
            print(f"   Th·ªùi gian: {metadata['datetime']}")
            print(f"   S·ªë files: {len(metadata['files']) + 2}")
            print(f"   Dung l∆∞·ª£ng: {metadata['total_size_mb']:.2f} MB")
            print()
        else:
            print(f"üìÅ {snapshot} (kh√¥ng c√≥ metadata)")
            print()

if __name__ == "__main__":
    # ==================== CLI ====================
    parser = argparse.ArgumentParser(
        description="T·∫°o v√† qu·∫£n l√Ω snapshots k·∫øt qu·∫£ ph√¢n t√≠ch",
    )
    parser.add_argument(
        "--list", action="store_true",
        help="Li·ªát k√™ t·∫•t c·∫£ snapshots hi·ªán c√≥"
    )
    parser.add_argument(
        "--name", type=str, default=None,
        help="ƒê·∫∑t t√™n snapshot t√πy ch·ªçn (m·∫∑c ƒë·ªãnh: snapshot_<timestamp>)"
    )
    parser.add_argument(
        "--extra", nargs='*', default=None,
        help="C√°c file b·ªï sung c·∫ßn th√™m v√†o snapshot (ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ho·∫∑c t∆∞∆°ng ƒë·ªëi)"
    )

    args = parser.parse_args()

    if args.list:
        list_snapshots()
    else:
        create_snapshot(snapshot_name=args.name, extra_paths=args.extra)
