#!/bin/bash

# Th∆∞ m·ª•c g·ªëc d·ª± √°n v√† c√°c ƒë∆∞·ªùng d·∫´n
ROOT_DIR="$(cd "$(dirname "$0")/../.."; pwd)"
SCRIPTS_DIR="$ROOT_DIR/02_scripts"
LOGS_DIR="$ROOT_DIR/04_logs"
DATA_DIR="$ROOT_DIR/01_data"

# T·∫°o file log v·ªõi timestamp
mkdir -p "$LOGS_DIR"
LOG_FILE="$LOGS_DIR/pipeline_log_$(date +%Y%m%d_%H%M%S).md"
CHECKPOINT_DIR="$ROOT_DIR/.pipeline_checkpoints"
mkdir -p "$CHECKPOINT_DIR"

# H√†m ghi log ra c·∫£ terminal v√† file
log() {
    echo "$1" | tee -a "$LOG_FILE"
}

# H√†m ki·ªÉm tra xem b∆∞·ªõc ƒë√£ ho√†n th√†nh ch∆∞a
is_step_completed() {
    [ -f "$CHECKPOINT_DIR/step_$1.done" ]
}

# H√†m ƒë√°nh d·∫•u b∆∞·ªõc ƒë√£ ho√†n th√†nh
mark_step_completed() {
    touch "$CHECKPOINT_DIR/step_$1.done"
    echo "$(date '+%Y-%m-%d %H:%M:%S')" > "$CHECKPOINT_DIR/step_$1.done"
}

# H√†m reset t·∫•t c·∫£ c√°c checkpoint
reset_checkpoints() {
    rm -rf "$CHECKPOINT_DIR"
    mkdir -p "$CHECKPOINT_DIR"
    log "üîÑ ƒê√£ reset t·∫•t c·∫£ checkpoints"
}

# H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
format_time() {
    local seconds=$1
    local hours=$((seconds / 3600))
    local minutes=$(((seconds % 3600) / 60))
    local secs=$((seconds % 60))
    
    if [ $hours -gt 0 ]; then
        printf "%dh %dm %ds" $hours $minutes $secs
    elif [ $minutes -gt 0 ]; then
        printf "%dm %ds" $minutes $secs
    else
        printf "%ds" $secs
    fi
}

# B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian t·ªïng
TOTAL_START=$(date +%s)

# Kh·ªüi t·∫°o file markdown
log "# Polars + PySpark Pipeline Execution Log"
log ""
log "**Th·ªùi gian b·∫Øt ƒë·∫ßu:** $(date '+%Y-%m-%d %H:%M:%S')"
log "**File log:** $LOG_FILE"
log ""
log "---"
log ""

log "## Th·ª±c thi Pipeline"
log ""
log "=== POLARS + PYSPARK PIPELINE ==="
log "Th·ªùi gian b·∫Øt ƒë·∫ßu: $(date '+%Y-%m-%d %H:%M:%S')"
log "### B∆∞·ªõc 1: Kh√°m ph√° d·ªØ li·ªáu"
log ""
if is_step_completed 1; then
    log "‚è≠Ô∏è  B∆∞·ªõc 1 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    python "$SCRIPTS_DIR/polars/01_explore_fast.py" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 1
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 1 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 1 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# B∆∞·ªõc 2
log "### B∆∞·ªõc 2: Chu·∫©n b·ªã ƒë·∫∑c tr∆∞ng v·ªõi Polars"
log ""
if is_step_completed 2; then
    log "‚è≠Ô∏è  B∆∞·ªõc 2 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    python "$SCRIPTS_DIR/polars/02_prepare_polars.py" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 2
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 2 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 2 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# B∆∞·ªõc 3 - Upload l√™n HDFS (b∆∞·ªõc 3 init centroids ƒë√£ lo·∫°i b·ªè - MLlib k-means++ t·ª± ƒë·ªông)
log "### B∆∞·ªõc 3: Upload d·ªØ li·ªáu l√™n HDFS"
log ""
if is_step_completed 3; then
    log "‚è≠Ô∏è  B∆∞·ªõc 3 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    bash "$SCRIPTS_DIR/spark/setup_hdfs.sh" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 3
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 3 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 3 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# B∆∞·ªõc 4 - SPARK K-means tr√™n HDFS (MLlib t·ª± ƒë·ªông d√πng k-means++)
log "### B∆∞·ªõc 4: Ch·∫°y MLlib K-means tr√™n HDFS (‚ö° k-means++)"
log ""
if is_step_completed 4; then
    log "‚è≠Ô∏è  B∆∞·ªõc 4 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    bash "$SCRIPTS_DIR/spark/run_spark.sh" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 4
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 4 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 4 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# B∆∞·ªõc 5 - T·∫£i v·ªÅ t·ª´ HDFS
log "### B∆∞·ªõc 5: T·∫£i k·∫øt qu·∫£ t·ª´ HDFS"
log ""
if is_step_completed 5; then
    log "‚è≠Ô∏è  B∆∞·ªõc 5 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    bash "$SCRIPTS_DIR/spark/download_from_hdfs.sh" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 5
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 5 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 5 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# B∆∞·ªõc 6
log "### B∆∞·ªõc 6: G√°n c·ª•m v·ªõi Polars"
log ""
if is_step_completed 6; then
    log "‚è≠Ô∏è  B∆∞·ªõc 6 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    python "$SCRIPTS_DIR/polars/04_assign_clusters.py" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 6
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 6 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 6 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# B∆∞·ªõc 7
log "### B∆∞·ªõc 7: Ph√¢n t√≠ch k·∫øt qu·∫£"
log ""
if is_step_completed 7; then
    log "‚è≠Ô∏è  B∆∞·ªõc 7 ƒë√£ ho√†n th√†nh, ƒëang b·ªè qua..."
else
    STEP_START=$(date +%s)
    python "$SCRIPTS_DIR/polars/05_analyze.py" 2>&1 | tee -a "$LOG_FILE"
    if [ $? -eq 0 ]; then
        mark_step_completed 7
        STEP_END=$(date +%s)
        STEP_TIME=$((STEP_END - STEP_START))
        log "‚è±Ô∏è  **B∆∞·ªõc 7 ho√†n th√†nh trong $(format_time $STEP_TIME)**"
    else
        log "‚ùå B∆∞·ªõc 7 th·∫•t b·∫°i"
        exit 1
    fi
fi
log ""

# T·ªïng th·ªùi gian
TOTAL_END=$(date +%s)
TOTAL_TIME=$((TOTAL_END - TOTAL_START))
log ""
log "---"
log ""
log "## T·ªïng k·∫øt"
log ""
log "‚úÖ **Pipeline ho√†n th√†nh th√†nh c√¥ng!**"
log ""
log "**Th·ªùi gian k·∫øt th√∫c:** $(date '+%Y-%m-%d %H:%M:%S')"
log "**T·ªïng th·ªùi gian ch·∫°y:** $(format_time $TOTAL_TIME)"
log ""
log "---"
log ""
log "*Log ƒë√£ l∆∞u t·∫°i: $LOG_FILE*"
